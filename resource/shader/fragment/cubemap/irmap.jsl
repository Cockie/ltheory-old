#include frag.jsl
#include lighting.jsl
#include math.jsl
#include noise.jsl
#include cube.jsl

uniform samplerCube source;
uniform sampler2D sampleBuffer;
uniform float angle;
uniform int samples;

void main() {
  vec2 uvp = uv;
  vec3 p = GetCubePosition(uvp, true);
  vec4 c = vec4(0.0);

  for (int i = 0; i < samples; ++i) {
    float u = float(i + 1) / float(samples + 1);
    vec3 sample = texture2DLod(sampleBuffer, vec2(u, 0.5), 0.0).xyz;
    sample = normalize(mix(p, sample, angle));
    sample *= sign(dot(sample, p));
    c += textureCubeLod(source, sample, 0.0);
  }

  RETURN(c / float(samples));
}
