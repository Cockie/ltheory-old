#include frag.jsl
#include lighting.jsl
#include math.jsl

FRAG_IN vec3 normal;
FRAG_IN vec3 position;
FRAG_IN vec3 vertposscaled;

uniform sampler2D depthBuffer;

float Line(float scale, float x) {
  float d = max(0.0, abs(2.0 * fract(x / scale + 0.5) - 1.0) - 0.05) / scale;
  return
      1.0 * exp(-pow2(4.0 * d))
    + 0.5 * exp(-sqrt(8.0 * d));
}

float Grid(float scale, vec3 p, vec3 n) {
  float t = 0.0;
  t += pow2(1.0 - abs(n.x)) * Line(scale, p.x);
  t += pow2(1.0 - abs(n.y)) * Line(scale, p.y);
  t += pow2(1.0 - abs(n.z)) * Line(scale, p.z);
  return t;
}

void main() {
  PREPASS
  EARLY_Z

  vec3 c = vec3(0.1);
  vec3 n = normalize(normal);
  float g = 0.0;
  float r = 1.0;

  float l = 2.0 * pow(length(position - eye), 0.75);
  float lg = log2(l);
  float l1 = pow(2.0, (floor(lg) + 0.0));
  float l2 = pow(2.0, (floor(lg) + 1.0));
  vec3 vps1 = vertposscaled / l1;
  vec3 vps2 = vertposscaled / l2;
  g += mix(Grid(0.1, vps1, n), Grid(0.1, vps2, n), fract(lg));
  c += 4.0 * g * vec3(1.0, 0.3, 0.1);

  float dn = length(normal - normalize(normal));
  // c *= mix(0.2, 1.0, exp(-1024 * dn));
  c *= uv.x;
  c *= sqrt(uv.x);
  c = toLinear(c);

  outputAlbedo(c);
  outputAlpha(1.0);
  outputNormal(n);
  outputMaterial(MATERIAL_NOSHADE);
  outputRoughness(r);
}
