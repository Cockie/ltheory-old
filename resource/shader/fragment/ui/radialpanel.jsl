#include ui.jsl

FRAG_IN vec4 attrib1;
FRAG_IN vec4 attrib2;
FRAG_IN vec4 attrib3;

uniform float shadowSize;

const float kOpacity = 1.0;

void main() {
  vec2 uv = attrib1.xy;
  float r1 = attrib1.z;
  float r2 = attrib1.w;
  vec4 color = attrib2;
  float innerAlpha = attrib3.x;
  float bevel = attrib3.y;
  float phase = attrib3.z;
  float angle = attrib3.w;

  vec2 uvp = (uv * frame - 0.5) / (frame - 1.0);
  float x = (r2 + 2.0 * shadowSize) * (2.0 * uvp.x - 1.0);
  float y = (r2 + 2.0 * shadowSize) * (2.0 * uvp.y - 1.0);

  float r = length(vec2(x, y));
  float a = atan(y, x) / TAU;

  float dr = max(0.0, abs(r - 0.5 * (r1 + r2)) - 0.5 * (r2 - r1) + bevel);
  float da = r * TAU * (min(abs(a - phase), abs(1.0 + a - phase)) - angle / 2.0);
  da = max(0.0, da + bevel);
  float dist = length(max(vec2(0.0), vec2(dr, da))) - bevel;
  float k = exp(-1.5 * max(0.0, dist));
  float mult =
    innerAlpha * kOpacity * k +
    0.5 * exp(-pow(0.25 * max(0.0, dist), 0.75));

  color.xyz = mix(vec3(0.0), color.xyz, exp(-1.0 * max(0.0, dist)));

#if 0
  /* Future / curved */
  color.xyz *= exp(-r / size.x);
#else
  /* Flat / metro */
  color.xyz *= 1.0;
#endif

#if 1
  color.xyz += 0.25 * vec3(0.4, 0.7, 1.0) * exp(-4.0 * length(uvp - vec2(0.5, 0.0)));
#endif

  mult = saturate(mult);
  RETURN(vec4(color.xyz, color.w * mult));
}
