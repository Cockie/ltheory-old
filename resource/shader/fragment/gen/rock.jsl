#include frag.jsl
#include math.jsl
#include noise.jsl

uniform float seed;
uniform vec3 colorPower;

const vec4 coef = vec4(.6, .5, .9, .9);

float genHeight(vec3 p) {
  vec4 z = vec4(p / 4. + .75, .3);
  float a = 0., l = 0., w = 1.;
  for (int i = 0; i < 32; ++i) {
    float m = dot(z, z);
    z = abs(z) / m - vec4(.4, .5, .6, .3);
    z += .1 * log(1.e-10 + noise4(float(i) + seed));
    z *= 1. + .25 * noise(float(i) + seed * 2. + 32.);
    z = z.yzwx;
    m = coef.x*z.x*z.x + coef.y*z.y*z.y + coef.z*z.z*z.z + coef.w*z.w*z.w;
    if (i > 0) {
      a += w * exp(-abs(m - l));
      w *= 0.8 + 0.25 * (2.0 * noise(seed + float(i) * 3.3) - 1.0);
    }
    l = m;
  }
  return 0.5 + 0.5 * sin(3.0 * a);
}

vec3 color(vec2 uv) {
  float t = 0.15 + 0.25 * exp(-4.0 * abs(genHeight(vec3(uv, 0.5)) - 0.5));
  vec3 c = pow(vec3(t), colorPower);
  return c;
}

void main() {
  vec3 c = emix(
    emix(color(uv - vec2(0.0, 0.0)), color(uv - vec2(1.0, 0.0)), uv.x),
    emix(color(uv - vec2(0.0, 1.0)), color(uv - vec2(1.0, 1.0)), uv.x), uv.y);
  RETURN(vec4(c, 1.0));
}
