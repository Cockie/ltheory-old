#include frag.jsl
#include math.jsl
#include color.jsl

uniform sampler2D texture;
uniform int mode;
uniform int radius;
uniform vec2 rcpFrame;
uniform float variance;

void main() {
  vec4 final = texture2D(texture, uv);
  vec4 cMin = final; 
  vec4 cMax = final; 

  for (int y = -radius; y <= radius; ++y) {
    for (int x = -radius; x <= radius; ++x) {
      if ((x != 0 || y != 0)) {
        vec2 offset = vec2(float(x), float(y));
        vec2 coord = uv + rcpFrame * offset;
        if (coord.x >= 0.0 && coord.x <= 1.0 && coord.y >= 0.0 && coord.y <= 1.0) {
          vec4 c = texture2D(texture, coord);
          vec2 v = vec2(variance);
          float l = lum(c.xyz);
          // v *= saturate(vec2(1.0 - l, l));
          // vec2 w = exp(-pow2(vec2(length(offset)) / v));
          vec2 w = saturate(1.0 - 0.5 * vec2(length(offset)) / v);
          cMin = mix(cMin, min(c, cMin), w.x);
          cMax = mix(cMax, max(c, cMax), w.y);
          final += c;
        }
      }
    }
  }

  RETURN(vec4(mode == 0 ? cMin : cMax));
}
