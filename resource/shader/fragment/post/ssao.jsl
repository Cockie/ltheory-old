#include frag.jsl
#include math.jsl
#include noise.jsl

FRAG_IN vec3 worldRayO;
FRAG_IN vec3 worldRayD;

uniform sampler2D texture;
uniform sampler2D depthBuffer;
uniform sampler2D noiseBuffer;
uniform sampler2D normalBuffer;
uniform mat4 viewProj;
uniform vec2 rcpFrame;

const int kSamples = 16;
const float rcpSamples = 1.0 / float(kSamples);
uniform vec3 kernel[kSamples];

void main() {
  vec4 c = texture2D(texture, uv);
  float d = texture2D(depthBuffer, uv).x;
  if (d >= farPlane)
    RETURN(c);

  vec3 N = decodeNormal(texture2D(normalBuffer, uv).xy);
  vec3 p = worldRayO + (d / farPlane) * worldRayD;

  float radius = d / 8.0;

  vec3 R = normalize(2.0 * texture2D(noiseBuffer, uv).xyz - 1.0);
  vec3 T = normalize(R - N * dot(R, N));
  vec3 B = cross(N, T);
  mat3 TBN = mat3(radius * T, radius * B, radius * N);

  float o = 0;
  for (int i = 0; i < kSamples; ++i) {
    vec3 samplePos = p + TBN * kernel[i];
    vec4 offset = vec4(samplePos, 1.0);

    offset = viewProj * offset;
    offset.xy /= offset.w;
    offset.x = 0.5 + 0.5 * offset.x;
    offset.y = 0.5 + 0.5 * offset.y;

    float td = texture2D(depthBuffer, offset.xy).x;
    vec3 tn = decodeNormal(texture2D(normalBuffer, offset.xy).xy);
    float atten = saturate(1.0 - dot(tn, N));
    float range = exp(-max(0.0, abs(d - td) / radius - 1.0));
    o += exp(-max(0.0, (td - d))) * range * atten;
  }

  float mask = pow(1.0 - o * rcpSamples, 16.0);
  c *= mask;
  // c = vec4(mask);
  RETURN(c);
}
