#ifndef common_math
#define common_math

const float TAU = 6.28319;

float avg(vec2 x) { return (x.x + x.y) / 2.0; }
float avg(vec3 x) { return (x.x + x.y + x.z) / 3.0; }
float avg(vec4 x) { return (x.x + x.y + x.z + x.w) / 4.0; }

float compress(float t, float p) {
  float m = 2. * abs(t - .5);
  float s = sign(t - .5);
  m = pow(m, p);
  return .5 + .5 * s * m;
}

float contrast(float x, float c) {
  return saturate((x - 0.5) * c + 0.5);
}

vec3 contrast(vec3 x, float c) {
  return vec3(contrast(x.x, c), contrast(x.y, c), contrast(x.z, c));
}

vec4 contrast(vec4 x, float c) {
  return vec4(contrast(x.x, c), contrast(x.y, c), contrast(x.z, c), contrast(x.w, c));
}

float emix(float a, float b, float t) {
  return exp((1.0 - t) * log(a) + t * log(b));
}

vec2 emix(vec2 a, vec2 b, float t) {
  return exp((1.0 - t) * log(a) + t * log(b));
}

vec3 emix(vec3 a, vec3 b, float t) {
  return exp((1.0 - t) * log(a) + t * log(b));
}

vec4 emix(vec4 a, vec4 b, float t) {
  return exp((1.0 - t) * log(a) + t * log(b));
}

float gain(float t, float p) {
  if (t < 0.5)
    return pow(2.0 * t, p) / 2.0;
  else
    return 1.0 - pow(1.0 - 2.0 * (t - 0.5), p) / 2.0;
}

float mixInv(float a, float b, float value) {
  return (value - a) / (b - a);
}

vec3 ortho(vec3 v) {
  return mix(vec3(v.z, 0.0, -v.x), vec3(v.y, -v.x, 0.0), abs(v.y));
}

float pow2(float x) { return x * x; }
vec2  pow2(vec2 x)  { return x * x; }
vec3  pow2(vec3 x)  { return x * x; }
vec4  pow2(vec4 x)  { return x * x; }

float pow3(float x) { return x * x * x; }
vec2  pow3(vec2 x)  { return x * x * x; }
vec3  pow3(vec3 x)  { return x * x * x; }
vec4  pow3(vec4 x)  { return x * x * x; }

float pow4(float x) { return pow2(pow2(x)); }
vec2  pow4(vec2 x)  { return pow2(pow2(x)); }
vec3  pow4(vec3 x)  { return pow2(pow2(x)); }
vec4  pow4(vec4 x)  { return pow2(pow2(x)); }

float pow8(float x) { return pow2(pow2(pow2(x))); }
vec2  pow8(vec2 x)  { return pow2(pow2(pow2(x))); }
vec3  pow8(vec3 x)  { return pow2(pow2(pow2(x))); }
vec4  pow8(vec4 x)  { return pow2(pow2(pow2(x))); }

float threshold(float f, float t) {
  return saturate((f - t) / (1.0 - t));
}

float cosp(float t) { return 0.5 + 0.5 * cos(t); }
float sinp(float t) { return 0.5 + 0.5 * sin(t); }

#endif
