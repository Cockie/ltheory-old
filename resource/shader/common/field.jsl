float sigmoid(float t) {
  return 1.0 / (1.0 + exp(-t));
}

float maxcomponent(vec2 v) {
  return max(v.x, v.y);
}

float maxcomponent(vec3 v) {
  return max(v.x, max(v.y, v.z));
}

float sum(vec2 v) {
  return v.x + v.y;
}

float sum(vec3 v) {
  return v.x + v.y + v.z;
}

float box(vec3 p, vec3 c, vec3 sides) {
  vec3 dist = abs(p - c) - sides;
  return max(dist.x, max(dist.y, dist.z));
}

float boxr(vec3 p, vec3 c, vec3 sides, float radius) {
  return length(max(abs(p - c) - sides * (1.0 - radius), 0.0)) - radius;
}

float capsule(vec3 p, vec3 o, vec3 n, float l, float r) {
  vec3 proj = o + clamp(dot(p - o, n), 0.0, l) * n;
  return length(p - proj) - r;
}

float cylinder(vec3 p, vec3 c, vec3 axis, float r) {
  vec3 to = p - c;
  float proj = dot(axis, to);
  float orthoDist = length(to - axis * proj);
  return orthoDist - r;
}

vec3 expand(vec3 p, vec3 amount) {
  return p - clamp(p, -amount, amount);
}

vec3 expandRadial(vec3 p, vec3 n, float a) {
  vec3 ortho = p -  n * dot(p, n);
  float d = length(ortho);
  return p - (a * min(d, 1.0) / d) * ortho;
}

float intersect(float a, float b, float sharpness) {
  return mix(a, b, sigmoid((b - a) * sharpness));
}

vec3 pinchAxis(vec3 p, vec3 axis) {
  float d = dot(p, axis);
  vec3 ortho = p - axis * d / dot(axis, axis);
  return p + ortho * abs(d);
}

vec3 pinchY(vec3 p, vec3 axis) {
  p.y *= 1.0 + max(0.0, dot(p, axis) - 1.0);
  return p;
}

vec3 mirrorRadial(vec3 p, vec3 origin, vec3 e1, vec3 e2, vec3 e3, float t) {
  p -= origin;
  float x = dot(p, e1);
  float y = dot(p, e2);
  float z = dot(p, e3);
  float a = (mod(atan(y, x) / radians(360.0) + 0.5 * t, t) - 0.5 * t);
  a = radians(360.0) * clamp(a, -1.0, 1.0);
  float r = sqrt(x*x + y*y);
  return (r * cos(a)) * e1 + (r * sin(a)) * e2 + z * e3 + origin;
}

float wavelet(float t, float p, float f) {
  float s = sin(radians(180.0) * t * f);
  return sign(s) * pow(abs(s), p);
}

float boxDent(vec3 p, vec3 s) {
  p = abs(2.0 * fract(p) - 1.0);
  return boxr(p, vec3(0.0), s, 0.01);
}

float hull(vec3 p) {
  p.x *= 0.25 - log(0.5 + 0.2 * wavelet(p.z, 1.0 / 32.0, 2.0));
  return boxr(p, vec3(0.0), vec3(1.0, 1.0, 1.0), 0.1);
}

float hull2(vec3 p) {
  p.x = abs(p.x);
  p.y /= 0.1 + exp(-2.0 * abs(p.x));
  p.x *= min(4.0, exp(4.0 * pow(max(0.0, abs(p.z - 0.7)), 1.0)));
  p.y *= min(4.0, exp(4.0 * pow(max(0.0, abs(p.z - 0.7)), 1.0)));
  p.y /= 2.0;
  return max(hull(p), -boxDent(p * vec3(1.0, 0.5, 4.0), vec3(0.8, 0.5, 0.8)));
}

float sandbox(vec3 p) {
  p.y /= 0.1 + 4.0 * exp(-5.0 * abs(p.x));
  p.x = 2.0 * abs(abs(p.x) - 0.3);
  return hull2(p);
}

float smoothUnion(float a, float b, float sharpness) {
  return mix(a, b, sigmoid((a - b) * sharpness));
}

float shell(vec3 p, vec3 center, float radius, float thickness) {
  return max(0.0, abs(length(p - center) - radius) - thickness);
}

float torus(vec3 p, vec3 center, float radius, float thickness) {
  p -= center;
  return length(p - radius * normalize(vec3(p.x, 0.0, p.z))) - thickness;
}

float wedge(
  vec3 p,
  vec3 center,
  float angle,
  float angleE,
  float radius,
  float rE,
  float h)
{
  p -= center;
  float t = atan(p.z, p.x) / TAU + 0.5;
  float r = length(p.xz);
  vec2 d = vec2(abs(r - radius),
                TAU * (0.5 - abs(abs(t - angle) - 0.5)));
  return max(length(max(d - vec2(rE, angleE * TAU), 0.0)) - 0.01,
             abs(p.y) - h) * r;
}

float field(vec3 p) {
  return FIELDFN;
}
