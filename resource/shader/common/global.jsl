#extension GL_EXT_gpu_shader4 : enable

#define V2T vec2
#define V3T vec3
#define V4T vec4
#define V4 vec4
#define V3 vec3
#define V2 vec2
#define tex2D texture2D

#ifdef GL_EXT_gpu_shader4
#define HIGHQ
#else
#define LOWQ
#endif

#if 1
  #define VERT_IN attribute
  #define VERT_OUT varying
  #define FRAG_IN varying
#else
  #define VERT_IN in
  #define VERT_OUT out
  #define FRAG_IN in
#endif

float saturate(float t) { return clamp(t, 0.0, 1.0); }
vec2  saturate(vec2 f)  { return clamp(f, vec2(0.0), vec2(1.0)); }
vec3  saturate(vec3 f)  { return clamp(f, vec3(0.0), vec3(1.0)); }
vec4  saturate(vec4 f)  { return clamp(f, vec4(0.0), vec4(1.0)); }

const float farPlane = 1.0e6;
const float nearPlane = 0.05;

#if 1
  const float kGamma = 2.2;
  float toGamma(float t)  { return pow(t, 1.0 / kGamma); }
  vec2  toGamma(vec2 t)   { return pow(t, vec2(1.0 / kGamma)); }
  vec3  toGamma(vec3 t)   { return pow(t, vec3(1.0 / kGamma)); }
  vec4  toGamma(vec4 t)   { return pow(t, vec4(1.0 / kGamma)); }
  float toLinear(float t) { return pow(t, kGamma); }
  vec2  toLinear(vec2 t)  { return pow(t, vec2(kGamma)); }
  vec3  toLinear(vec3 t)  { return pow(t, vec3(kGamma)); }
  vec4  toLinear(vec4 t)  { return pow(t, vec4(kGamma)); }
#else
  vec3 toGamma(vec3 c)  { return c; }
  vec3 toLinear(vec3 c) { return c; }
  vec4 toGamma(vec4 c)  { return c; }
  vec4 toLinear(vec4 c) { return c; }
#endif
