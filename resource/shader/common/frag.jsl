#include global.jsl

#output 0 vec4 fragment_color0
#output 1 vec4 fragment_color1

FRAG_IN float linearDepth;
FRAG_IN vec2 uv;
FRAG_IN vec3 vertpos;
FRAG_IN vec3 vertnormal;
FRAG_IN vec3 vertcolor;

uniform int prepass;

#define RETURN(x)  { fragment_color0 = x; return; }

const int MATERIAL_PHONG = 0;
const int MATERIAL_COOKT = 1;
const int MATERIAL_ICE = 2;
const int MATERIAL_NOSHADE = 3;
const float kMaterialCount = 4.0;

#if 0

  /* Stereographic Normal Encoding ~ Singularity @ (0, 0, -1) */
  vec2 encodeNormal(vec3 n) {
    /* Avoid singularity via slight z-clamp. */
    n.z = max(-0.999999, n.z);
    const float scale = 1.7777;
    return 0.5 * (n.xy / (n.z + 1.0)) / scale + 0.5;
  }

  vec3 decodeNormal(vec2 n) {
    const float scale = 1.7777;
    vec3 nn = 2.0 * scale * vec3(n, 0.0) + vec3(-scale, -scale, 1.0);
    float g = 2.0 / dot(nn, nn);
    return vec3(g * nn.xy, g - 1.0);
  }

#else

  const float kPI = 3.1415926536;
  vec2 encodeNormal(vec3 n) {
    return 0.5 * (vec2(atan(n.y, n.x) / kPI, n.z) + 1.0);
  }

  vec3 decodeNormal(vec2 n) {
    vec2 ang = 2.0 * n - 1.0;
    vec2 scth = vec2(sin(ang.x * kPI), cos(ang.x * kPI));
    vec2 scphi = vec2(sqrt(1.0 - ang.y * ang.y), ang.y);
    return vec3(scth.y * scphi.x, scth.x * scphi.x, scphi.y);
  }

#endif

void outputAlbedo(vec3 a) {
  fragment_color0.xyz = a;
}

void outputAlpha(float alpha) {
  fragment_color0.w = alpha;
}

void outputNormal(vec3 n) {
  fragment_color1.xy = encodeNormal(n);
}

void outputRoughness(float roughness) {
  fragment_color1.z = roughness;
}

void outputMaterial(int m) {
  fragment_color1.w = float(m) / kMaterialCount;
}

#define EARLY_Z                                                                \
  if (linearDepth > texture2D(depthBuffer, gl_FragCoord.xy * rcpFrame).x)      \
    discard;

#define PREPASS if (prepass == 1) { RETURN(vec4(linearDepth)); }
