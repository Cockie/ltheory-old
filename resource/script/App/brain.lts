type Edge
  Int src
  Int dst
  Vec2 energy
  Float mult
  Float cooldown

function Vec2 CMult (Vec2 e1 Vec2 e2)
  Vec2
    e1.x * e2.x - e1.y * e2.y
    e1.x * e2.y + e1.y * e2.x

function Vec2 CDiv (Vec2 e1 Vec2 e2)
  Vec2
    (e1.x * e2.x + e1.y * e2.y) / (e2.x * e2.x + e2.y * e2.y)
    (e1.y * e2.x - e1.x * e2.y) / (e2.x * e2.x + e2.y * e2.y)

type Node
  Vec2 position
  Vec2 energy

type App
  (Array Node) nodes (Array Node)
  (Array Edge) edges (Array Edge)
  Int nodeCount 1024
  Int edgeCount 8
  Int frame 0
  Float totalEnergy 0.0
  Float energyEdge 0.0

  function Float GetEnergy ()
    var e 0.0
    for i 0 i < nodes.Size i.++
      ref node (nodes.Get i)
      e += node.energy.Length
    e

  function Float GetEdgeEnergy ()
    var e 0.0
    for i 0 i < edges.Size i.++
      ref edge (edges.Get i)
      e += edge.energy.Length
    e

  function Void Create (Widget self)
    var rng (RNG_MTG Int_Random)

    for i 0 i < nodeCount i.++
      var node Node
      var angle 2Pi * rng.Float
      node.position = (Vec2 angle.Cos angle.Sin)
      node.position *= rng.Float ^ 0.5
      node.energy = rng.Float * (rng.Vec2 -1 1)
      nodes += node

    for i 0 i < nodeCount i.++
      var j 0
      while j < edgeCount
        var src i
        var dst (rng.Int nodeCount)
        if src != dst
          ref node1 (nodes.Get src)
          ref node2 (nodes.Get dst)
          var distance (Length node1.position - node2.position)
          var p (ExpDecay distance 0.05)
          var roll rng.Float
          if roll < p
            var edge Edge
            edge.cooldown = 0.0
            edge.src = src
            edge.dst = dst
            edge.mult = 1.0
            edge.energy = 1.0 * (Vec2 (rng.Float -1.0 1.0) (rng.Float -1.0 1.0))
            edges += edge
            j += 1

    totalEnergy = this.GetEnergy
    energyEdge = this.GetEdgeEnergy

  function Void PreUpdate (Widget self)
    var dt 0.01
    var steps 1
    var rng (RNG_MTG frame)

    # Add energy
    if Mouse_LeftPressed
      var cursor Cursor_Get
      var center self.Center
      var s 0.5 * (Vec2 (Min self.size.x self.size.y))
      for i 0 i < nodes.Size i.++
        ref node (nodes.Get i)
        var dist (Length cursor - (center + s * node.position))
        var factor (ExpDecay dist 16)
        node.energy *= 1.0 + 500.0 * factor

    # Add synch node
      if Mouse_RightPressed
        var cursor Cursor_Get
        var center self.Center
        var s 0.5 * (Vec2 (Min self.size.x self.size.y))

    for j 0 j < steps j.++
      # Energy transfer
      for i 0 i < edges.Size i.++
        ref edge (edges.Get i)
        if edge.cooldown <= 0.0
          ref node1 (nodes.Get edge.src)
          ref node2 (nodes.Get edge.dst)
          var e1 node1.energy.Length
          var e2 node2.energy.Length
          if e1 > 0.0 && e2 > 0.0
            var factor edge.mult * dt * (e1 / e2)
            var transfer (CMult node1.energy edge.energy)
            var dot (Dot transfer.Normalize node2.energy.Normalize)
            dot = dot.Saturate
            # factor *= dot ^ 1.0
            factor = 1.0 - (ExpDecay factor 1.0)
            var finalTransfer transfer * factor
            node1.energy -= finalTransfer
            node2.energy += finalTransfer

            edge.energy *= (ExpDecay dt * (1.0 - dot) 1.0)

      # Energy rotation
      if true
        for i 0 i < nodes.Size i.++
          ref node (nodes.Get i)
          var angle dt * node.energy.Length
          var rotation (Vec2 angle.Cos angle.Sin)
          node.energy = (CMult node.energy rotation)

      # Energy conservation
      if true
        desc "Nodes"
          var e this.GetEnergy
          var factor totalEnergy / e
          for i 0 i < nodes.Size i.++
            ref node (nodes.Get i)
            node.energy *= factor

        desc "Edges"
          var e this.GetEdgeEnergy
          var factor energyEdge / e
          for i 0 i < edges.Size i.++
            ref edge (edges.Get i)
            edge.energy *= factor

      # Edge replenishment
      if false
        for i 0 i < edges.Size i.++
          ref edge (edges.Get i)
          edge.cooldown -= dt

      frame += 1
    
  function Void PreDraw (Widget self)
    DrawPanel self.pos self.size 0.1 1 1 0

  function Void PostDraw (Widget self)
    Draw Icon/Cursors:Cross Cursor_Get 12 4.0 * Colors:Primary 0.3
    # Widget/Dev/FrameInfo:Draw self
    DrawText (Fonts:Heading) "Neural Sandbox" self.TopLeft + (Vec2 16 48) 72 0.3 0.5 false

    var glyph (Glyph_Circle 0 1 1 1)
    # var glyph (Glyph_Arc 0 0 0.1 1 1 0 1)
    var center self.Center
    var s 0.4 * (Vec2 (Min self.size.x self.size.y))

    for i 0 i < nodes.Size i.++
      ref node (nodes.Get i)
      var p center + s * node.position
      var t node.energy.Length
      Draw glyph p 12.0 Colors:Primary t.Saturate

    for i 0 i < edges.Size i.++
      ref edge (edges.Get i)
      ref node1 (nodes.Get edge.src)
      ref node2 (nodes.Get edge.dst)
      var psrc center + s * node1.position
      var pdst center + s * node2.position
      var t node1.energy.Length
      Draw (Glyph_LineFade psrc pdst 1 1) 0 1.0 0.02 1.0
      if t > 0.001
        Draw (Glyph_LineFade psrc pdst 1 1) 0 1.0 Colors:Primary 0.2 * t

function Data Main ()
  widget:Create
    Layer
      Compositor_None
      Mesh_Quad
      1.0
      Stack
        Custom Widget App
