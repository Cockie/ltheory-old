type Node
  Vec2 p
  Int value 0
  Int valueLast 0
  Int heat 0
  Float valueAvg 0.0
  Float heatAvg 0.0

type Edge
  Int src
  Int dst
  Bool boundary

type Graph
  (Array Node) nodes (Array Node)
  (Array Edge) edges (Array Edge)

  function Void AddLatticeGrid (Int sx Int sy)
    var index 0
    for y 0 y < sy y.++
      for x 0 x < sx x.++
        var p (Vec2 x / (sx - 1) y / (sy - 1))
        p = 2.0 * p - 1.0
        var angle 3.0 * Pi4
        var c angle.Cos
        var s angle.Sin
        p = (Vec2 c * p.x + s * p.y c * p.y - s * p.x)
        p.x *= (Sqrt 2.0)
        p = 0.5 * p + 0.5
        nodes += (Node p)

        var xp x + 1
        var xp2 x + 2
        var yp y + 1
        var yp2 y + 2
        var boundaryX false
        var boundaryY false
        var boundaryX2 false
        var boundaryY2 false

        if xp >= sx
          xp -= sx
          boundaryX = true
        if yp >= sy
          yp -= sy
          boundaryY = true
        if xp2 >= sx
          xp2 -= sx
          boundaryX2 = true
        if yp2 >= sy
          yp2 -= sy
          boundaryY2 = true

        edges += (Edge index (yp * sx + x) boundaryY)
        edges += (Edge index (y * sx + xp) boundaryX)
        edges += (Edge index (yp * sx + xp) boundaryX || boundaryY)
        index.++

  function Void AddLattice (Int poly Int radius)
    var countLast 0
    var indexLast 0

    var anchors (Array Vec2)
    for i 0 i < poly i.++
      var phase 2Pi * (i / poly) + Pi2
      anchors += (Vec2 phase.Cos phase.Sin)

    for i 0 i < radius i.++
      var count (Max 1 poly * i)
      var r (Mix 0 1.0 i / radius)
      var index nodes.Size

      for j 0 j < count j.++
        var phase 2Pi * (j / count) + Pi2
        var p (Vec2 phase.Cos phase.Sin)

        if i > 0
          var a (Int_Divide j i)
          var b (Mod a + 1 poly)
          ref aa (anchors.Get a)
          ref ab (anchors.Get b)
          var pa aa
          var pb ab
          var n (Normalize pb - pa)
          p = pa + n * (Dot n (p - pa))

        p = 0.5 + 0.5 * r * p
        nodes += (Node p)

        var indexNext (Mod j + 1 count)
        edges += (Edge index + j index + indexNext false)

        if (i > 0) && (i + 1 == radius)
          if ((Mod j i) == 0)
            var other (Mod j + (Int_Divide count 2) count)
            edges += (Edge index + j index + other true)

        if i > 0
          if (Mod j i) == 0
            var proj (Int_Divide j i)
            proj *= (i - 1)
            edges += (Edge index + j indexLast + proj false)
          if (Mod j i) != 0
            var m (Mod j i)
            var proj (Int_Divide j i)
            proj *= (i - 1)
            edges += (Edge index + j indexLast + proj + m - 1 false)
            edges += (Edge index + j indexLast + (Mod proj + m countLast) false)

      countLast = count
      indexLast = index

  function Void Step ()
    var factor 1.0 - (ExpDecay 1.0 10.0)

    for i 0 i < nodes.Size i.++
      ref node (nodes.Get i)
      node.valueLast = node.value
      node.value = 0

    for i 0 i < edges.Size i.++
      ref edge (edges.Get i)
      ref src (nodes.Get edge.src)
      ref dst (nodes.Get edge.dst)
      src.value += dst.valueLast
      dst.value += src.valueLast

    for i 0 i < nodes.Size i.++
      ref node (nodes.Get i)
      node.value = (Mod node.value 2)
      node.valueAvg = (Mix node.valueAvg (cast Float node.value) factor)
      switch
        (node.value == node.valueLast)
          node.heat += 1
          node.heatAvg = (Mix node.heatAvg 1.0 factor)
        otherwise
          node.heat = 0
          node.heatAvg = (Mix node.heatAvg 0.0 factor)
